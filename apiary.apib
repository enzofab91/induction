FORMAT: 1A
# Rails API Target

# Group Users [api/v1/users/]

## Sign up User [POST]

+ Request Bad

    + Headers

            Content-Type: application/json

    + Body

            + Attributes(User)
            + password_confirmation: password_dont_match

+ Response 404

    + Body

              {
              "status": "error",
              "errors": {
                "password_confirmation": [
                  "doesn't match Password"
                ],
                "full_messages": [
                  "Password confirmation doesn't match Password"
                ]
              }
            }

+ Request 200

    + Headers

            Content-Type: application/json

    + Body

            + Attributes(User)

+ Response 200

    + Body

            {
              "status": "success"",
              "data": {
                "email":"user@example.com",
                "password":"password",
                "password_confirmation":"password_not_match",
                "gender":"M"
              }
            }

# User [api/v1/users/:id]

## Get User [GET]

+ Request Bad

    + Headers

        Content-Type: application/json

    + Body

        {
                'errors':['You need to sign in or sign up before continuing.']
        }

+ Response 404

+ Request 200

    + Headers

            Content-Type: application/json
            access-token: valid_token
            client: client_id
            uid: user@example.com

+ Response 200

    + Body

            + Attributes(User)

## Update User [PATCH]

+ Request Bad

    + Headers

        Content-Type: application/json

    + Body
        
        {
                'errors':['You need to sign in or sign up before continuing.']
        }

+ Response 404

+ Request 200

    + Headers

            Content-Type: application/json
            access-token: valid_token
            client: client_id
            uid: user@example.com

    + Body
                + Attributes(User)

+ Response 200

    + Body

            + Attributes(User)

# Group Sessions [api/v1/users/sign_in]

## Sign in User [POST]

+ Request Bad

    + Headers

            Content-Type: application/json

    + Body

            Attributes(User_credentials)
            + password: wrong-password

+ Response 404

    + Body

              {
              "status": "error",
              "errors": {
                "full_messages": [
                  "Invalid login credentials. Please try again."
                ]
              }
            }

+ Request 200

    + Headers

            Content-Type: application/json

    + Body

            + Attributes(User_credentials)

+ Response 200
    + Headers

            access-token: valid_token
            client: client_id
            uid: user@example.com

    + Body

            {
              "data": {
                "email":"user@example.com",
                "password":"password",
                "gender":"M",
                "uid":"user@example.com"
              }
            }

# Logout [api/v1/users/sign_out]

## Sign out User [DELETE]

+ Request Bad

    + Headers

            Content-Type: application/json

    + Body

+ Response 404

    + Body

            {
              "error": "User was not found or was not logged in."
            }

+ Request 200

    + Headers
    
            access-token: valid_token
            client: client_id
            uid: user@example.com

    + Body

+ Response 200
    + Headers

    + Body

            {
              "success": true
            }

## Reset password [/api/v1/users/password]
# Based on https://devise-token-auth.gitbook.io/devise-token-auth/usage/reset_password

### Reset password [POST]

+ Request Bad

    + Body
        
                {
                        'email': 'user@example.com'
                }

+ Response 401

+ Request 200

    + Body

                {
                        'email': 'user@example.com',
                        'redirect_url': 'http://www.example.com'
                }

+ Response 200

    + Body

            {
              'success': true,
              'message': 'An email has been sent to \'user@example.com\' containing instructions for resetting your password.'
            }

### Reset password [PUT]

+ Request Bad

        + Parameters
                
                + reset_password_token (string, required)

        + Body

            {
              'password': 'new_password',
              'password_confirmation': 'unmatching_password'
            }

+ Response 401

+ Request 200

        + Body

            {
              'password': 'new_password',
              'password_confirmation': 'new_password'
            }

+ Response 200

    + Headers

            access-token: valid_token
            client: client_id
            uid: user@example.com

    + Body

            {
              'data':
                {
                  'email': 'user@example.com',
                  'first_name": 'Test',
                  'last_name": 'Test',
                  'uid': uid
                }
            }

## Edit reset password [/api/v1/users/password/edit]

### Edit reset password [GET]

+ Request 200

        + Headers
                
                Content-Type: application/json
        
        + Parameters

                + reset_password_token (string, required)
                + redirect_url (string, required)

+ Response 200
    + Headers

            access-token: valid_token
            client: client_id
            uid: user@example.com

# Topic Collection [api/v1/topics/]

## Get Topics [GET]

+ Request Bad

    + Headers

            Content-Type: application/json

    + Body

+ Response 401

+ Request 200

    + Headers

            Content-Type: application/json
            access-token: valid_token
            client: client_id
            uid: user@example.com

    + Body

+ Response 200

    + Body

            "topics": [
                {
                  "topic": {
                    "id": 1,
                    "name": "topic",
                    "image": "URL"
                  }
                }
              ]
            }

# Target Collection [api/v1/targets/]

## Get Targets [GET]

+ Request Bad

    + Headers

            Content-Type: application/json

    + Body

+ Response 401

+ Request 200

    + Headers

            Content-Type: application/json
            access-token: valid_token
            client: client_id
            uid: user@example.com

    + Body

+ Response 200

    + Body

            "targets": [
                {
                  "target": {
                    "id": 1,
                    "title": "target title",
                    "radius": "radius",
                    "latitude": "latitude",
                    "topic_id": "topic_id"
                  }
                }
              ]
            }

## Create Target [POST]

+ Request Bad

    + Headers

    + Body

            + Attributes(Target)

+ Response 401

+ Request 200

    + Headers

            Content-Type: application/json

    + Body

            + Attributes(Target)

+ Response 200

    + Body

            + Attributes(Target)

## Target [/api/v1/targets/{id}]

## Destroy Targets [DELETE]

+ Request Bad

    + Headers

            Content-Type: application/json

    + Body

+ Response 401

+ Request 200

    + Headers

            Content-Type: application/json
            access-token: valid_token
            client: client_id
            uid: user@example.com

    + Body

+ Response 204

    + Body

# Group Confirmations [api/v1/confirmations/]

## Confirm email [GET]

+ Request Bad

    + Headers

    + Parameters

+ Response 404

    + Body

        {
              "error": "Confirmation token can't be blank.",
        }

+ Request 200

    + Headers

            Content-Type: application/json

    + Parameters

            + confirmation_token: token (required)

+ Response 200

    + Body

            {
              message: "Your email address has been successfully confirmed."
            }

# Conversation Collection [api/v1/conversations/]

## Get Conversations [GET]

+ Request Bad

    + Headers

            Content-Type: application/json

    + Body

+ Response 401

+ Request 200

    + Headers

            Content-Type: application/json
            access-token: valid_token
            client: client_id
            uid: user@example.com

    + Body

+ Response 200

    + Body

            "conversations": [
                {
                  "conversation": {
                    "id": 1,
                    "match_id": "match_id"
                  }
                }
              ]

## Data Structures

### User (object)
+ email: user@example.com (required)
+ password: password (required)
+ password_confirmation: password (required)
+ gender: M (required)
+ first_name: name
+ last_name: last name

### User_credentials (object)
+ email: user@example.com (required)
+ password: password (required)

### Target (object)
+ title: target title (required)
+ radius: radius (required)
+ latitude: latitude (required)
+ longitude: longitude (required)
+ topic_id: topic_id (required)
